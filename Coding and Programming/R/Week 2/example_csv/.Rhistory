setwd("/Volumes/data/Research/CDB-HBN R Activity/SM EEG")
#import sample data
SMDataset <- read.csv("n37.csv")
#attach the data
attach(SMDataset)
#elongate data for performance
#create a data set for performance only
PerformaceData <- SMDataset[c(2:5, 10:11)]
#run gather function to elongate, turn on tidyr package
PerformaceData %>% gather(condition, performance, perf_vocal_no_exp:perf_button_press_w_exp)
#make this into own data frame
LongPerf <- data.frame(PerformaceData %>% gather(condition, performance, perf_vocal_no_exp:perf_button_press_w_exp))
#recode for the four conditions
attach(LongPerf)
LongPerf$condition[LongPerf$condition == "perf_button_press_no_exp"] <- 0
LongPerf$condition[LongPerf$condition == "perf_button_press_w_exp"] <- 1
LongPerf$condition[LongPerf$condition == "perf_vocal_no_exp"] <- 2
LongPerf$condition[LongPerf$condition == "perf_vocal_w_exp"] <- 3
#make two columns, one for stranger presence, one for button vs. verbal
LongPerf$StrangerPresence <- LongPerf$condition
LongPerf$StrangerPresence[LongPerf$StrangerPresence== "2"] <- 0
LongPerf$StrangerPresence[LongPerf$StrangerPresence== "3"] <- 1
LongPerf$Verbal <- LongPerf$condition
LongPerf$Verbal [LongPerf$Verbal == "1"] <- 0
LongPerf$Verbal [LongPerf$Verbal == "2"] <- 1
LongPerf$Verbal [LongPerf$Verbal == "3"] <- 1
#run ANOVA for performance
fit_performance <- aov(performance~(StrangerPresence*Verbal*sm_dx) +
Error(Subject_ID/(StrangerPresence*Verbal)) +
(sm_dx), data=LongPerf)
#boxplot to visualize
boxplot(performance~(StrangerPresence*Verbal), data=LongPerf,
main = "Performance by Condition",
xlab = "Stranger Presence x Verbal", ylab = "Performance Score")
#interpretation of condition axis: 0.0 is button, no person. 1.0 is button, stranger. 0.1 is verbal, no person. 1.1 is verbal, with person
#Reaction Time:
#make data set with just RT
RTData <- SMDataset[c(2:3, 6:7, 12:13)]
#take out NA's
RTData2 <- na.omit(RTData)
#elongate RT data
LongRT <- RTData2 %>% gather(condition, RT, rt_vocal_no_exp:rt_button_press_w_exp)
#recode conditions
attach(LongRT)
LongRT$condition[LongRT$condition == "rt_button_press_no_exp"] <- 0
LongRT$condition[LongRT$condition == "rt_button_press_w_exp"] <- 1
LongRT$condition[LongRT$condition == "rt_vocal_no_exp"] <- 2
LongRT$condition[LongRT$condition == "rt_vocal_w_exp"] <- 3
#make two columns, one for stranger presence, one for button vs. verbal
LongRT$StrangerPresence <- LongRT$condition
LongRT$StrangerPresence[LongRT$StrangerPresence== "2"] <- 0
LongRT$StrangerPresence[LongRT$StrangerPresence== "3"] <- 1
LongRT$Verbal <- LongRT$condition
LongRT$Verbal [LongRT$Verbal == "1"] <- 0
LongRT$Verbal [LongRT$Verbal == "2"] <- 1
LongRT$Verbal [LongRT$Verbal == "3"] <- 1
#run ANOVA for RT
fit_RT <- aov(RT~(StrangerPresence*Verbal*sm_dx) +
Error(Subject_ID/(StrangerPresence*Verbal)) +
(sm_dx), data=LongRT)
#boxplot to visualize
boxplot(RT~(StrangerPresence*Verbal), data=LongRT,
main = "RT by Condition", xlab = "Stranger Presence x Verbal", ylab = "RT Score")
#interpretation of condition axis: 0.0 is button, no person. 1.0 is button, stranger. 0.1 is verbal, no person. 1.1 is verbal, with person
#Volume:
#make data set with just Amplitude
VolumeData <- SMDataset[c(2:3, 8:9)]
#take out NA's
VolumeData2 <- na.omit(VolumeData)
#elongate RT data
LongVolume <- VolumeData2 %>% gather(condition, amplitude, ampl_vocal_no_exp:ampl_vocal_w_exp)
#recode conditions
attach(LongVolume)
LongVolume$condition[LongVolume$condition == "ampl_vocal_no_exp"] <- 0
LongVolume$condition[LongVolume$condition == "ampl_vocal_w_exp"] <- 1
fit_volume <- aov(amplitude~(condition*sm_dx) + Error(Subject_ID/(condition)) + (sm_dx), data=LongVolume)
#boxplot to visualize
boxplot(amplitude~(condition), data=LongVolume,
main = "Amplitude by Condition", xlab = "Condition", ylab =  "Amplitude")
#better visuals to see differences between kids with sm_dx vs. control kids
interaction.plot(LongRT$condition, LongRT$sm_dx, LongRT$RT)
interaction.plot(LongPerf$condition, LongPerf$sm_dx, LongPerf$performance)
interaction.plot(LongVolume$condition, LongVolume$sm_dx, LongVolume$amplitude)
#see if the interaction is significant
results <- lm(amplitude~condition + sm_dx +condition*sm_dx, data=LongVolume)
anova(results)
#try to make it look like SM poster
#accuracy by SM diag and Stranger presensce
interaction.plot(LongPerf$sm_dx, LongPerf$StrangerPresence, LongPerf$performance,
main= "Accuracy by SM Diag and Stranger Presence",
ylim=c(60,100),
xlab="SM Diagnostic Status",
ylab="Accuracy(%Correct)",
col.main="black", col.lab= "dark blue",
cex.main=0.75,
col=c("black", "blue"), lwd=2, legend=FALSE)
legend("bottomleft", title="Stranger Presence", c("Absent", "Present"),
text.col="blue", cex=.75, inset=.05,
col=c("black", "blue"),lty=c(2,1), lwd=2)
#RT by SM Diag and response mode
interaction.plot(LongRT$sm_dx, LongRT$Verbal, LongRT$RT,
ylim=c(0.8,1.3),
main= "RT by SM Diag and Response Mode",
xlab="SM Diagnostic Status",
ylab="Reaction Time (s)",
col.main="black", col.lab= "dark blue",
cex.main=0.75,
col=c("black", "blue"), lwd=2, legend=FALSE)
legend("bottomright", title="Response Mode", c("Button Press", "Vocal"),
text.col="blue", cex=.75, inset=.05,
col=c("black", "blue"),lty=c(2,1), lwd=2)
#Volume by SM diag and stranger presence
interaction.plot(LongVolume$sm_dx, LongVolume$condition, LongVolume$amplitude,
ylim=c(0.0,0.5),
main= "Volume by SM Diag and Stranger Presence",
xlab="SM Diagnostic Status",
ylab="Volume",
col.main="black", col.lab= "dark blue",
cex.main=0.75,
col=c("black", "blue"), lwd=2, legend=FALSE)
legend("bottomleft", title="Stranger Presence", c("Absent", "Present"),
text.col="blue", cex=.75, inset=.05,
col=c("black", "blue"),lty=c(2,1), lwd=2)
#accuracy by SM diag and stranger presense IN VOCAL MODE
#interaction.plot(LongPerf$sm_dx, (LongPerf$condition if(Long$Perf$condition== c(2,3)), LongPerf$performance)
#interaction.plot(LongPerf$sm_dx, (LongPerf$StrangerPresence if(LongPerf$Verbal, 1)), LongPerf$performance)
#if(LongPerf$Verbal==1) interaction.plot (LongPerf$sm_dx, LongPerf$StrangerPresence, LongPerf$performance)
#none of those worked so I guess I shall make two new data frames
PerformanceVerbalMode <- SMDataset[c(2:5)]
PerformanceVerbalMode %>% gather(condition, performance, perf_vocal_no_exp:perf_vocal_w_exp)
PerformanceVerbalMode2<- data.frame(PerformanceVerbalMode %>% gather(condition, performance, perf_vocal_no_exp:perf_vocal_w_exp))
PerformanceVerbalMode2$condition[PerformanceVerbalMode2$condition == "perf_vocal_no_exp"] <- 0
PerformanceVerbalMode2$condition[PerformanceVerbalMode2$condition == "perf_vocal_w_exp"] <- 1
interaction.plot(PerformanceVerbalMode2$sm_dx, PerformanceVerbalMode2$condition, PerformanceVerbalMode2$performance,
ylim=c(50, 100),
main = "Accuracy by SM Diag and Stranger Presence:Vocal Mode",
xlab = "SM Diagnostic Status",
ylab =  "Accuracy (% Correct)",
col.main="black", col.lab= "dark blue",
cex.main=0.75,
col=c("black", "blue"), lwd=2, legend=FALSE)
legend("bottomright", title="Stranger Presence", c("Absent", "Present"),
text.col="blue", cex=.75, inset=.05,
col=c("black", "blue"),lty=c(2,1), lwd=2)
#repeat for button press mode
PerformanceButtonMode <- SMDataset[c(2:3, 10:11)]
PerformanceButtonMode %>% gather(condition, performance, perf_button_press_no_exp:perf_button_press_w_exp)
PerformanceButtonMode2<- data.frame(PerformanceButtonMode %>% gather(condition, performance, perf_button_press_no_exp:perf_button_press_w_exp))
PerformanceButtonMode2$condition[PerformanceButtonMode2$condition == "perf_button_press_no_exp"] <- 0
PerformanceButtonMode2$condition[PerformanceButtonMode2$condition == "perf_button_press_w_exp"] <- 1
interaction.plot(PerformanceButtonMode2$sm_dx, PerformanceButtonMode2$condition, PerformanceButtonMode2$performance,
ylim=c(50, 100),
main = "Accuracy by SM Diag and Stranger Presence:Button Mode",
xlab = "SM Diagnostic Status",
ylab =  "Accuracy (% Correct)",
col.main="black", col.lab= "dark blue",
cex.main=0.75,
col=c("black", "blue"), lwd=2, legend=FALSE)
legend("bottomleft", title="Stranger Presence", c("Absent", "Present"),
text.col="blue", cex=.75, inset=.05,
col=c("black", "blue"),lty=c(2,1), lwd=2)
fit_RT
Summary(fit_RT)
View(LongPerf)
library("ggplot2", lib.loc="~/Library/R/3.3/library")
qplot("sm_dx", "performance", data=PerformanceButtonMode2,
color="blue", geom="line", xlab= "SM Diagnostic Status", ylab= "Accuracy (% Correct)",
ylim= c(50,100), main= "Accuracy by SM Diag and Stranger Presence: Button Mode")
qplot("sm_dx", "performance", data=PerformanceButtonMode2,
color="blue", geom="line", xlab= "SM Diagnostic Status", ylab= "Accuracy (% Correct)",
main= "Accuracy by SM Diag and Stranger Presence: Button Mode")
qplot("sm_dx", "performance", data="PerformanceButtonMode2",
color="blue", geom="line", xlab= "SM Diagnostic Status", ylab= "Accuracy (% Correct)",
main= "Accuracy by SM Diag and Stranger Presence: Button Mode")
qplot("sm_dx", "performance", data=PerformanceButtonMode2,
color="blue", geom="line", xlab= "SM Diagnostic Status", ylab= "Accuracy (% Correct)",
main= "Accuracy by SM Diag and Stranger Presence: Button Mode")
tryplot <- interaction.plot(PerformanceButtonMode2$sm_dx, PerformanceButtonMode2$condition, PerformanceButtonMode2$performance,
ylim=c(50, 100),
main = "Accuracy by SM Diag and Stranger Presence:Button Mode",
xlab = "SM Diagnostic Status",
ylab =  "Accuracy (% Correct)",
col.main="black", col.lab= "dark blue",
cex.main=0.75,
col=c("black", "blue"), lwd=2, legend=FALSE)
legend("bottomleft", title="Stranger Presence", c("Absent", "Present"),
text.col="blue", cex=.75, inset=.05,
col=c("black", "blue"),lty=c(2,1), lwd=2)
tryplot + geom_line() + stat_smooth(method="lm")
gp <- ggplot(df, aes(x= "SM Diagnostic Status", y= "Accuracy (%Correct)",
color="Stranger Presence", group="Stranger Presence"))
gp + geom_line(aes(linetype="Stranger Presence")) + geom_point(aes(shape="Stranger Presense")) + geom_errorbar(aes(ymax=x+se, ymin=x-se))
gp <- ggplot(df, aes(x= "SM Diagnostic Status", y= "Accuracy (%Correct)",
color="Stranger Presence", group="Stranger Presence"))
gp <- ggplot(df, aes(x= "SM Diagnostic Status", y= "Accuracy (%Correct)",
color="Stranger Presence", group="Stranger Presence"))
gp + geom_line(aes(linetype="Stranger Presence")) +
geom_point(aes(shape="Stranger Presense"))
gp + geom_line(aes(linetype="Stranger Presence")) +
geom_point(aes(shape="Stranger Presense"))
help(help)
x <- 7
y <- "diagnosis"
3.42 -> z
a <- z
b <- y -> c
m[2,] = TRUE
m
m <- matrix(nrow = 3, ncol = 4)
dim(m)
m
m[1,1] = TRUE
m
m[1,2] = FALSE
m
m[2,] = TRUE
m
m2 <- 1:25
dim(m2) <- c(5,5)
m2
help(help)
?c
example(c)
?Quotes
"This is a sentence\nThis is the next line"
x <- 7
y <- "diagnosis"
3.42 -> z
a <- z
b <- y -> c
x
a
typeof(x)
typeof(y)
my_char <- "Hello"
typeof(my_char)
my_num <- 1.4
typeof(my_num)
my_logical <- TRUE
typeof(my_logical)
empty_vector_1 <- vector()
empty_vector_1
length = 1
empty_vector_2 <- vector("character", length = 12)
empty_vector_2
typeof(empty_vector_2[0])
c(5, "hello", FALSE)
character(5)
numeric(5)
logical(5)
nums <- c(1,2,3)
nums
length(nums)
nums[2]
nums[2] = 10
nums
nums[0]
1:100
nums2 <- 1:100
nums2
nums3 <- seq(40)
nums3
seq(5)
nums4 <- seq(1, 10, by = .2)
nums4
nums5 <- c(nums4, 101)
nums5
va <- c("char", 1, 1.0)
va
vb <- c(TRUE, 1, 97)
vb
vc <- c(TRUE, 1, 0)
vc
vd <- c("What", TRUE, FALSE)
vd
m <- matrix(nrow = 3, ncol = 4)
m
dim(m)
m[1,1]
m[1,1] = TRUE
m
m[1,2] = FALSE
m
m[2,] = TRUE
m
m[,3]
m1 <- matrix(1:10, nrow = 5, ncol = 2)
m1
m2 <- 1:25
m2
dim(m2) <- c(5,5)
m2
m3 <- rbind(c(1:3), c(4:6), c(7:9))
m3
m4 <- cbind(c(100:149), c(150:199), c(200:249))
m4
l <- list(1, TRUE, "three")
l
list_w_in_list <- list(FALSE, 2, l)
list_w_in_list
list_w_in_list[[4]] <- "This is the 4th item in the list"
list_w_in_list
list_w_in_list[[4]][[2]] <- "This is the 2nd part of the 4th item in the list"
list_w_in_list
df <- data.frame(id = c(1:10), isOdd = c("Yes", "No", "Yes", "No", "Yes", "No", "Yes", "No", "Yes", "No"),
isEven = c(FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE, FALSE, TRUE))
df
head(df)
tail(df)
dim(df)
nrow(df)
ncol(df)
str(df)
names(df)
df$isEven
df[,3]
df[2,1]
df[4,]
odd = factor(df$isOdd)
odd
View(df)
df$isOdd = NULL
x + z
x - z
x * z
x / z
x ^ z
x %% z
x %/% z
x < z
x > z
x == z
x >= z
x <= z
quotient = 10 / 3
quotient
integer_quotient = 10 %/% 3
modulus = 10 %% 3
integer_quotient
modulus
quotient == integer_quotient + modulus / 3
sqrt(x)
exp(x) # e^x
log(x)
-log(exp(x))
abs(-log(exp(x)))
3 + 4
exp(1)
log(100)
abs(-100)
my_string <- "/Users/Username/Desktop/filename.csv"
nchar(my_string)
print(my_string)
print("hello world!")
this_string <- "HeLlO WoRlD"
tolower(this_string) #Note: this_string itself does not actually change
this_string
toupper(this_string)
this_string
new_string1 = substring(this_string, 1, 3)
new_string1
new_string2 = substring(this_string, 4) #if there is no 3rd argument, R defaults to the very end of the string
new_string2
paste(new_string1, new_string2)
paste("This", "Sentence", "Is", "Separated", "by", "Forward", "Slashes", sep = "/")
getwd()
getwd()
setwd("/Volumes/Data/Research/CDB/RA\ Didactics/Programming_Jan2017/Week\ 2/example_csv")
getwd()
setwd("/Volumes/Data/Research/CDB/RA\ Didactics/Programming_Jan2017/Week\ 2/example_csv")
words_3 <- read.csv(file = "words_3.csv")
View(words_3)
names(words_3)
names(words_3)[2] <- "Rode_Canon"
names(words_3)[names(words_3) == "X2017.01.03_ArnoT_Sony_.Watson..json"] <- "Sony"
words_3$col_is_equal <- (words_3$Rode_Canon == words_3$Sony)
words_3[1] <- NULL
write.csv(words_3, file = "output/words_3_edited.csv")
wd <- file.path("/", "Volumes", "Data", "Research", "CDB", "RA\ Didactics", "Programming_Jan2017", "Week\ 2", "example_csv")
getwd()
setwd(wd)
file_list <- list.files(wd)
file_list
words_3$Sony
fib <- c(1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89)
paste("mean:", mean(fib))
paste("median:", median(fib))
print("quantile:", quote = FALSE)
quantile(fib) # Divides a vector into quantiles (i.e. 0th, 25th, 50th/median, 75th, and 100th percentiles)
paste("min:", min(fib))
paste("max:", max(fib))
paste("var:", var(fib)) # variance
print("sort:", quote = FALSE)
sort(fib, decreasing = TRUE)
print("summary:", quote = FALSE)
summary(fib)
fib
fib <- sort(fib, decreasing = TRUE)
fib
fib <- sort(fib, decreasing = TRUE)
fib
fib <- sort(fib, decreasing = FALSE)
fib
fib <- c(fib, NA)
paste("mean (na.rm = TRUE):", mean(fib, na.rm = TRUE))
paste("mean (na.rm = FALSE):", mean(fib, na.rm = FALSE))
fib <- fib[1:11]
fib_head_reversed <- sort(fib, decreasing = TRUE)
fib + fib_head_reversed
fib * 4
a <- TRUE
b <- !a
b
paste("a:", a)
paste("b:", b)
a & b
a_AND_b <- a & b
paste("a & b:", a_AND_b)
paste("a & a:", (a & a))
paste("b & b:", (b & b))
a_OR_b <- a | b
paste("a | b:", a_OR_b)
paste("a | a:", (a | a))
paste("b | b:", (b | b))
a_XOR_b <- xor(a, b)
paste("a XOR b:", a_XOR_b)
paste("a XOR a:", xor(a, a))
paste("b XOR b:", xor(b, b))
fib[1]
fib_head_reversed[1]
fib[1] == fib_head_reversed[1]
"1 < 89?"
fib[1] < fib_head_reversed[1]
"1 > 89?"
fib[1] > fib_head_reversed[1]
"1 <= 89?"
fib[1] <= fib_head_reversed[1]
"1 >= 89?"
fib[1] >= fib_head_reversed[1]
fib[1] == fib_head_reversed[11] # 1 == 1?
"1 < 1?"
fib[1] < fib_head_reversed[11]
"1 > 1?"
fib[1] > fib_head_reversed[11]
"1 <= 1?"
fib[1] <= fib_head_reversed[11]
"1 >= 1?"
fib[1] >= fib_head_reversed[11]
all(words_3$col_is_equal)
fib
all(fib)
all(c(TRUE, FALSE, TRUE, TRUE))
x <- c(1,4,7,NA,12,19,15,NA,20)
x_is_NA <- is.na(x)
x_is_NA
x_no_NA <- x[!x_is_NA]
x_no_NA
if(length(fib) > length(x)) {
"fib is longer than x"
}
if(length(fib) < length(x)) {
"fib is shorter than x"
}
if(length(fib) == length(x)) {
"fib is the same length as x"
}
if(length(fib) > length(x)) {
"fib is longer than x"
}
if(length(fib) > length(x)) {
"fib is shorter than x"
}
if(length(fib) == length(x)) {
"fib is the same length as x"
}
if(length(fib) != length(fib_head_reversed)) {
"fib is not the same length as fib_head_reversed"
} else {
"fib is the same length as fib_head_reversed"
}
if(fib[1] > fib[2]){
"fib[1] > fib[2]"
} else if(fib[1] < fib[2]){
"fib[1] < fib[2]"
} else {
"fib[1] == fib[2]"
}
for(i in 1:10){
print(fib_head_reversed[i]*2)
}
k <- length(x)
while(k > 0) {
print(x[k] - k)
k <- k-1
}
i = length(fib)
repeat {
print(paste("fib[", i, "] == ", fib[i], sep=""));
if((fib[i] == fib[i - 1]) | (i < 1)){
print(paste("fib[", (i - 1), "] == fib[", i, "]", sep=""))
break
} else {
i <- (i - 1);
}
}
for (i in 1:length(fib)){
if(!fib[i] %% 2) { # skip even numbers
next
} else {
print(c(i, fib[i]))
}
}
