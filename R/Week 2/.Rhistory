getwd()
setwd("/Volumes/Data/Research/CDB/RA\ Didactics/Programming_Jan2017/Week\ 2/example_csv")
getwd()
setwd("/Volumes/Data/Research/CDB/RA\ Didactics/Programming_Jan2017/Week\ 2/example_csv")
words_3 <- read.csv(file = "words_3.csv")
setwd("/Volumes/Data/Research/CDB/RA\ Didactics/Programming_Jan2017/Week\ 2/example_csv")
# rename columns we want to keep
names(words_3)[2] <- "Rode_Canon"
names(words_3)[names(words_3) == "X2017.01.03_ArnoT_Sony_.Watson..json"] <- "Sony"
# add a column to tell if the values in the original two columns are equal
words_3$col_is_equal <- (words_3$Rode_Canon == words_3$Sony)
# remove column we don't need
words_3[1] <- NULL
# write updated database to new csv file
write.csv(words_3, file = "words_3_edited.csv")
wd <- file.path("/", "Volumes", "Data", "Research", "CDB", "RA\ Didactics", "Programming_Jan2017", "Week\ 2", "example_csv")
setwd(wd)
file_list <- list.files(wd)
file_list
words_3$Sony
fib <- c(1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89)
paste("mean:", mean(fib))
paste("median:", median(fib))
print("quantile:", quote = FALSE)
quantile(fib) # Divides a vector into quantiles (i.e. 0th, 25th, 50th/median, 75th, and 100th percentiles)
paste("min:", min(fib))
paste("max:", max(fib))
paste("var:", var(fib)) # variance
print("sort:", quote = FALSE)
sort(fib, decreasing = TRUE)
print("summary:", quote = FALSE)
summary(fib)
fib <- c(fib, NA)
paste("mean (na.rm = TRUE):", mean(fib, na.rm = TRUE))
paste("mean (na.rm = FALSE):", mean(fib, na.rm = FALSE))
fib <- fib[1:11]
fib_head_reversed <- sort(fib, decreasing = TRUE)
fib + fib_head_reversed
fib * 4
a <- TRUE
b <- !a
paste("a:", a)
paste("b:", b)
a_AND_b <- a & b
paste("a & b:", a_AND_b)
paste("a & a:", (a & a))
paste("b & b:", (b & b))
a_OR_b <- a | b
paste("a | b:", a_OR_b)
paste("a | a:", (a | a))
paste("b | b:", (b | b))
a_XOR_b <- xor(a, b)
paste("a XOR b:", a_XOR_b)
paste("a XOR a:", xor(a, a))
paste("b XOR b:", xor(b, b))
fib[1]
fib_head_reversed[1]
"1 == 89?"
fib[1] == fib_head_reversed[1] # 1 == 89?
"1 < 89?"
fib[1] < fib_head_reversed[1]
"1 > 89?"
fib[1] > fib_head_reversed[1]
"1 <= 89?"
fib[1] <= fib_head_reversed[1]
"1 >= 89?"
fib[1] >= fib_head_reversed[1]
"1 == 1?"
fib[1] == fib_head_reversed[11] # 1 == 1?
"1 < 1?"
fib[1] < fib_head_reversed[11]
"1 > 1?"
fib[1] > fib_head_reversed[11]
"1 <= 1?"
fib[1] <= fib_head_reversed[11]
"1 >= 1?"
fib[1] >= fib_head_reversed[11]
all(words_3$col_is_equal)
all(fib) # FALSE <- 0; TRUE <- !0
all(c(TRUE, FALSE, TRUE, TRUE))
x <- c(1,4,7,NA,12,19,15,NA,20)
x_is_NA <- is.na(x)
x_is_NA
x_no_NA <- x[!x_is_NA]
x_no_NA
if(length(fib) > length(x)) {
"fib is longer than x"
}
if(length(fib) < length(x)) {
"fib is shorter than x"
}
if(length(fib) == length(x)) {
"fib is the same length as x"
}
if(length(fib) != length(fib_head_reversed)) {
"fib is not the same length as fib_head_reversed"
} else {
"fib is the same length as fib_head_reversed"
}
if(fib[1] > fib[2]){
"fib[1] > fib[2]"
} else if(fib[1] < fib[2]){
"fib[1] < fib[2]"
} else {
"fib[1] == fib[2]"
}
for(i in 1:10){
print(fib_head_reversed[i]*2)
}
k <- length(x)
while(k > 0) {
print(x[k] - k)
k <- k-1
}
i = length(fib)
repeat {
print(paste("fib[", i, "] == ", fib[i], sep=""));
if((fib[i] == fib[i - 1]) | (i < 1)){
print(paste("fib[", (i - 1), "] == fib[", i, "]", sep=""))
break
} else {
i <- (i - 1);
}
}
for (i in 1:length(fib)){
if(!fib[i] %% 2) { # skip even numbers
next
} else {
print(c(i, fib[i]))
}
}
setwd("/Volumes/Data/Research/CDB/RA\ Didactics/Programming_Jan2017/Week\ 2/example_csv")
words_3 <- read.csv(file = "words_3.csv")
setwd("/Volumes/Data/Research/CDB/RA\ Didactics/Programming_Jan2017/Week\ 2/example_csv")
# rename columns we want to keep
names(words_3)[2] <- "Rode_Canon"
names(words_3)[names(words_3) == "X2017.01.03_ArnoT_Sony_.Watson..json"] <- "Sony"
# add a column to tell if the values in the original two columns are equal
words_3$col_is_equal <- (words_3$Rode_Canon == words_3$Sony)
# remove column we don't need
words_3[1] <- NULL
# write updated database to new csv file
write.csv(words_3, file = "output/words_3_edited.csv")
getwd()
